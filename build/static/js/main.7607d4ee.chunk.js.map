{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","foxbox.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadFile","description","add","error","size","loading","dstorage","methods","hash","send","from","account","on","reload","e","alert","bind","a","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","DStorage","networks","Contract","abi","address","fileCount","call","filesCount","i","id","className","Component","Navbar","href","rel","src","box","width","height","alt","substring","Identicon","toString","module","exports","Main","role","style","maxWidth","aria-label","maxHeight","scope"],"mappings":"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","file":"static/js/main.7607d4ee.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = DStorage.networks[networkId]\n    if(networkData) {\n      // Assign contract\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\n      this.setState({ dstorage })\n      // Get files amount\n      const filesCount = await dstorage.methods.fileCount().call()\n      this.setState({ filesCount })\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await dstorage.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('DStorage contract not deployed to detected network.')\n    }\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result.size)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      // Assign value for the file without extension\n      if(this.state.type === ''){\n        this.setState({type: 'none'})\n      }\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n    this.uploadFile = this.uploadFile.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport box from '../foxbox.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"chrisfox.eth\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n          ChrisFox.eth Music\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li>\n            <small id=\"account\">\n              <a target=\"_blank\"\n                 alt=\"\"\n                 className=\"text-white\"\n                 rel=\"noopener noreferrer\"\n                 href={\"https://etherscan.io/address/\" + this.props.account}>\n                {this.props.account.substring(0,6)}...{this.props.account.substring(38,42)}\n              </a>\n            </small>\n            { this.props.account\n              ? <img\n                  alt=\"\"\n                  className='ml-2'\n                  width='30'\n                  height='30'\n                  src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","module.exports = __webpack_public_path__ + \"static/media/foxbox.2eb1cfc5.png\";","import React, { Component } from 'react';\nimport { convertBytes } from './helpers';\nimport moment from 'moment'\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5 text-center\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\n            <div className=\"content\">\n              <p>&nbsp;</p>\n              <div className=\"card mb-3 mx-auto bg-light\" style={{ maxWidth: '512px' }}>\n                <h2 className=\"text-dark text-monospace bg-light\"><b><ins>Music built on Ethereum, no <span role=\"img\" aria-label=\"cap\" alt=\"cap\">🧢</span></ins></b></h2>\n              </div>\n              <p>&nbsp;</p>\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\n                <thead style={{ 'fontSize': '15px' }}>\n                  <tr className=\"bg-dark text-white\">\n                    <th scope=\"col\" style={{ width: '200px'}}>Band</th>\n                    <th scope=\"col\" style={{ width: '230px'}}>File Name</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <tr className=\"bg-light text-black\">\n                  <td>Audible Silence</td>\n                  <td><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrisfox-eth-link.ipns.dweb.link/Audible%20Silence/Throop.eth.mp3\">Throop.eth</a></td>\n                  </tr>\n                  <tr className=\"bg-light text-black\">\n                  <td>Trophywife</td>\n                  <td><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrisfox-eth-link.ipns.dweb.link/Trophywife/Someones%20gonna%20shoot%20me.mp3\">Someone's gonna shoot me</a></td>\n                  </tr>\n                  <tr className=\"bg-light text-black\">\n                  <td>The Proper Hustlers</td>\n                  <td><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrisfox-eth-link.ipns.dweb.link/When%20I%20get%20pissed,%20you%20get%20mist.mp3\">In The Midst</a></td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"],"sourceRoot":""}