{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Navbar from'./Navbar';import Main from'./Main';import Web3 from'web3';import'./App.css';var ipfsClient=require('ipfs-http-client');var ipfs=ipfsClient({host:'ipfs.infura.io',port:5001,protocol:'https'});// leaving out the arguments will default to these values\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){_classCallCheck(this,App);return _super.apply(this,arguments);}_createClass(App,[{key:\"componentWillMount\",value:function(){var _componentWillMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return this.loadWeb3();case 2:_context.next=4;return this.loadBlockchainData();case 4:case\"end\":return _context.stop();}}},_callee,this);}));function componentWillMount(){return _componentWillMount.apply(this,arguments);}return componentWillMount;}()},{key:\"loadWeb3\",value:function(){var _loadWeb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.ethereum){_context2.next=6;break;}window.web3=new Web3(window.ethereum);_context2.next=4;return window.ethereum.enable();case 4:_context2.next=7;break;case 6:if(window.web3){window.web3=new Web3(window.web3.currentProvider);}else{window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');}case 7:case\"end\":return _context2.stop();}}},_callee2);}));function loadWeb3(){return _loadWeb.apply(this,arguments);}return loadWeb3;}()},{key:\"loadBlockchainData\",value:function(){var _loadBlockchainData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var web3,accounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:web3=window.web3;// Load account\n_context3.next=3;return web3.eth.getAccounts();case 3:accounts=_context3.sent;this.setState({account:accounts[0]});case 5:case\"end\":return _context3.stop();}}},_callee3,this);}));function loadBlockchainData(){return _loadBlockchainData.apply(this,arguments);}return loadBlockchainData;}()}]);return App;}(Component);;export default App;","map":{"version":3,"sources":["/Users/chrisfox/git/landing-pages/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account"],"mappings":"63BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAO,WAAP,CAEA,GAAMC,CAAAA,UAAU,CAAGC,OAAO,CAAC,kBAAD,CAA1B,CACA,GAAMC,CAAAA,IAAI,CAAGF,UAAU,CAAC,CAAEG,IAAI,CAAE,gBAAR,CAA0BC,IAAI,CAAE,IAAhC,CAAsCC,QAAQ,CAAE,OAAhD,CAAD,CAAvB,CAAmF;GAE7EC,CAAAA,G,qTAEJ,yJACQ,MAAKC,QAAL,EADR,8BAEQ,MAAKC,kBAAL,EAFR,4D,wNAKA,4IACMC,MAAM,CAACC,QADb,0BAEID,MAAM,CAACE,IAAP,CAAc,GAAIZ,CAAAA,IAAJ,CAASU,MAAM,CAACC,QAAhB,CAAd,CAFJ,uBAGUD,CAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAHV,sCAKO,GAAIH,MAAM,CAACE,IAAX,CAAiB,CACpBF,MAAM,CAACE,IAAP,CAAc,GAAIZ,CAAAA,IAAJ,CAASU,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd,CACD,CAFI,IAGA,CACHJ,MAAM,CAACK,KAAP,CAAa,qEAAb,EACD,CAVH,wD,8MAaA,0JACQH,IADR,CACeF,MAAM,CAACE,IADtB,CAEE;AAFF,uBAGyBA,CAAAA,IAAI,CAACI,GAAL,CAASC,WAAT,EAHzB,QAGQC,QAHR,gBAIE,KAAKC,QAAL,CAAc,CAAEC,OAAO,CAAEF,QAAQ,CAAC,CAAD,CAAnB,CAAd,EAJF,6D,iIApBgBrB,S,EA0BjB,CACD,cAAeU,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] });\n  }\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}