{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chrisfox/git/landing-pages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/chrisfox/git/landing-pages/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n\n    _this.uploadFile = function (description) {\n      console.log(\"Submitting file to IPFS...\"); // Add file to the IPFS\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('IPFS result', result.size);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this.setState({\n          loading: true\n        }); // Assign value for the file without extension\n\n\n        if (_this.state.type === '') {\n          _this.setState({\n            type: 'none'\n          });\n        }\n\n        _this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, _this.state.type, _this.state.name, description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n\n          window.location.reload();\n        }).on('error', function (e) {\n          window.alert('Error');\n\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    };\n    _this.uploadFile = _this.uploadFile.bind(_assertThisInitialized(_this));\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 59\n        }\n      }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n        files: this.state.files,\n        captureFile: this.captureFile,\n        uploadFile: this.uploadFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/chrisfox/git/landing-pages/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","props","uploadFile","description","console","log","add","state","buffer","error","result","size","setState","loading","type","dstorage","methods","hash","name","send","from","account","on","window","location","reload","e","alert","files","bind","captureFile","loadWeb3","loadBlockchainData","ethereum","web3","enable","currentProvider","eth","getAccounts","accounts"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n\n  }\n\n  \n\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result.size)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      // Assign value for the file without extension\n      if(this.state.type === ''){\n        this.setState({type: 'none'})\n      }\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n    this.uploadFile = this.uploadFile.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}