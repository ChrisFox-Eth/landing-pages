"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ethers = require("ethers");

// this allows us to flexibly upgrade web3 and fix bugs as they surface
// or to migrate to a totally different library and have a single point of modification
var _default = {
  toWei: (value, units) => _ethers.ethers.utils.parseUnits(value, units),
  // This converts a string representation from a value to a number of units, based on the number of decimals passed in
  toDecimal: (value, decimals) => _ethers.ethers.utils.parseUnits(value, decimals),
  hexlify: _ethers.ethers.utils.hexlify,
  hexStripZeros: _ethers.ethers.utils.hexStripZeros,
  bigNumberify: _ethers.ethers.BigNumber.from,
  hexToNumberString: num => _ethers.ethers.utils.formatUnits(_ethers.ethers.BigNumber.from(num), 'wei').replace('.0', ''),
  toChecksumAddress: _ethers.ethers.utils.getAddress,
  fromWei: (num, units) => {
    return _ethers.ethers.utils.formatUnits(_ethers.ethers.BigNumber.from(num), units).replace(/\.0$/, '');
  },
  // This converts a string representation from a unit value to a higher base
  fromDecimal: (num, decimals) => {
    return _ethers.ethers.utils.formatUnits(_ethers.ethers.BigNumber.from(num), decimals).replace(/\.0$/, '');
  },
  isInfiniteKeys: value => {
    return _ethers.ethers.BigNumber.from(value).eq(_ethers.ethers.constants.MaxUint256);
  },
  toNumber: value => {
    return _ethers.ethers.BigNumber.from(value).toNumber();
  },
  toRpcResultNumber: number => {
    const num = _ethers.ethers.utils.hexlify(_ethers.ethers.BigNumber.from(number));

    return _ethers.ethers.utils.hexZeroPad(num, 32);
  },
  toRpcResultString: string => {
    return string;
  },
  utf8ToHex: str => _ethers.ethers.utils.hexlify(str.length ? _ethers.ethers.utils.toUtf8Bytes(str) : 0),
  sha3: _ethers.ethers.utils.keccak256,
  verifyMessage: _ethers.ethers.utils.verifyMessage
};
exports.default = _default;